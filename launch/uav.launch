<launch>

  <arg name="uav_name" default="$(optenv UAV_NAME uav)" />
  <arg name="NATO_NAME" default="$(env NATO_NAME)" />

  <arg if="$(eval arg('NATO_NAME') == 'alfa')" name="uav_name2" default="uav61" />
  <arg if="$(eval arg('NATO_NAME') == 'bravo')" name="uav_name2" default="uav60" />

  <!-- will it run using GNU debugger? -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix_debug" value=""/>
  <arg     if="$(arg debug)" name="launch_prefix_debug" value="debug_roslaunch"/>

  <!-- will it run as standalone nodelet or using a nodelet manager? -->
  <arg name="standalone" default="true" />
  <arg name="manager" default="$(arg uav_name)_ballooncircledestroy_manager" />
  <arg unless="$(arg standalone)" name="nodelet" value="load"/>
  <arg     if="$(arg standalone)" name="nodelet" value="standalone"/>
  <arg unless="$(arg standalone)" name="nodelet_manager" value="$(arg manager)"/>
  <arg     if="$(arg standalone)" name="nodelet_manager" value=""/>

  <!-- Namespace -->
  <group ns="$(arg uav_name)">

    <!-- WaypointFlier nodelet -->
    <node pkg="nodelet" type="nodelet" name="balloon_circle_destroy" args="$(arg nodelet) balloon_circle_destroy/BalloonCircleDestroy $(arg nodelet_manager)" launch-prefix="$(arg launch_prefix_debug)" output="screen">

      <param name="uav_name" type="string" value="$(arg uav_name)" />

      <!-- Parameters loaded from launch file -->

      <!-- ROS parameters config file -->
      <rosparam file="$(find balloon_circle_destroy)/config/uav.yaml" />

      <!-- World frame -->
      <param name="world_frame_id" type="string" value="$(arg uav_name)/arena_origin" />
      <!-- safety are frame - sorry Tomas -->
      <param name="safety_area_frame" type="string" value="$(arg uav_name)/gps_origin" />

      <!-- Untilted frame for yaw -->
      <param name="untilted_frame_id" type="string" value="$(arg uav_name)/fcu_untilted" />

      <!-- Subscribers -->
      <remap from="~odom_uav_in" to="control_manager/cmd_odom" />
      <remap from="~tracker_diagnostics_in" to="control_manager/mpc_tracker/diagnostics" />
      <remap from="~balloon_point_in" to="balloon_filter/balloon_chosen_out" />
      <remap from="~balloon_point_cloud_in" to="object_detect/detected_balls_pcl" />
      <remap from="~constraints_diagnostics_in" to="constraint_manager/diagnostics" />
      <remap from="~realsense_camera_info" to="rs_d435/color/camera_info" />
      <remap from="~comrade_diagnostics" to="/$(arg uav_name2)/control_manager/diagnostics" />
      <remap from="~arena_info" to="arena_publisher/mbzirc_arena_parameters" />

      <!-- Publishers -->
      <remap from="~rviz_out" to="~rviz_out" />
      <remap from="~status_out" to="~status_out" />
      <remap from="~ref_out" to="~ref_out" />
      <remap from="~ball_out" to="~ball_out" />

      <!-- Service servers -->
      <remap from="~circle_around" to="~circle_around" />
      <remap from="~auto_start" to="~auto_start" />
      <remap from="~start_state_machine" to="~start_state_machine" />
      <remap from="~stop_state_machine" to="~stop_state_machine" />
      <remap from="~reset_forbidden_zones" to="~reset_forbidden_zones" />

      <!-- Service clients -->
      <remap from="~trajectory_srv" to="control_manager/mpc_tracker/set_trajectory" />
      <remap from="~land_out" to="uav_manager/land" />
      <remap from="~eland" to="control_manager/eland" />
      <remap from="~drone_stop" to="control_manager/hover" />
      <remap from="~reset_estimation" to="balloon_filter/reset_estimation" />
      <remap from="~start_estimation" to="balloon_filter/start_estimation" />
      <remap from="~stop_estimation" to="balloon_filter/stop_estimation" />
      <remap from="~add_zone" to="balloon_filter/add_exclusion_zone" />
      <remap from="~reset_zones" to="balloon_filter/reset_exclusion_zones" />
      <remap from="~set_constraints_out" to="constraint_manager/set_constraints" />

    </node>

  </group>

</launch>
